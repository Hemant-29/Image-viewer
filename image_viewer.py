# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file '.\image viewer.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import os


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QFileDialog, QMessageBox


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(910, 710)

        self.address = ""
        self.entries = ""
        self.indx = 0

        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")

        self.viewport = QtWidgets.QLabel(self.centralwidget)
        self.viewport.setGeometry(QtCore.QRect(10, 0, 891, 641))
        self.viewport.setAutoFillBackground(False)
        self.viewport.setText(
            "Please go to file menu to select a file path. \n Or click below")
        self.viewport.setScaledContents(True)
        self.viewport.setAlignment(QtCore.Qt.AlignHCenter | QtCore.Qt.AlignTop)
        self.viewport.setWordWrap(False)
        self.viewport.setObjectName("viewport")

        self.pushButton = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton.setGeometry(QtCore.QRect(0, 0, 400, 200))
        font = QtGui.QFont()
        font.setFamily("MS Gothic")
        font.setPointSize(18)
        font.setBold(False)
        font.setUnderline(False)
        font.setWeight(50)
        self.pushButton.setFont(font)
        self.pushButton.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.pushButton.setAutoFillBackground(False)
        self.pushButton.move(260, 255)
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap(
            "./open folder.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.pushButton.setIcon(icon)
        self.pushButton.setIconSize(QtCore.QSize(100, 100))
        self.pushButton.setObjectName("pushButton")

        self.left = QtWidgets.QPushButton(self.centralwidget)
        self.left.setGeometry(QtCore.QRect(0, 300, 41, 28))
        self.left.setObjectName("left")
        self.right = QtWidgets.QPushButton(self.centralwidget)
        self.right.setGeometry(QtCore.QRect(870, 300, 41, 28))
        self.right.setObjectName("right")
        MainWindow.setCentralWidget(self.centralwidget)

        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 911, 26))
        self.menubar.setObjectName("menubar")
        self.menuFile = QtWidgets.QMenu(self.menubar)
        self.menuFile.setObjectName("menuFile")
        MainWindow.setMenuBar(self.menubar)

        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.actionOpen = QtWidgets.QAction(MainWindow)
        self.actionOpen.setObjectName("actionOpen")
        self.actionexit = QtWidgets.QAction(MainWindow)
        self.actionexit.setObjectName("actionexit")
        self.menuFile.addAction(self.actionOpen)
        self.menuFile.addAction(self.actionexit)
        self.menubar.addAction(self.menuFile.menuAction())

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        self.pushButton.clicked.connect(self.openFileDialog)
        self.left.clicked.connect(lambda: self.drawImage("l"))
        self.right.clicked.connect(lambda: self.drawImage("r"))

        self.actionOpen.triggered.connect(self.openFileDialog)
        self.actionexit.triggered.connect(sys.exit)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Image viewer"))
        self.left.setStatusTip(_translate("MainWindow", "go to last image"))
        self.left.setText(_translate("MainWindow", "<"))
        self.left.setShortcut(_translate("MainWindow", "Ctrl+S"))
        self.right.setStatusTip(_translate("MainWindow", "go to next image"))
        self.right.setText(_translate("MainWindow", ">"))
        self.right.setShortcut(_translate("MainWindow", "Right"))
        self.menuFile.setTitle(_translate("MainWindow", "File"))
        self.actionOpen.setText(_translate("MainWindow", "Open"))
        self.actionOpen.setStatusTip(_translate("MainWindow", "open a folder"))
        self.actionOpen.setShortcut(_translate("MainWindow", "Ctrl+O"))
        self.actionexit.setText(_translate("MainWindow", "exit"))
        self.actionexit.setStatusTip(_translate("MainWindow", "exit the app"))
        self.actionexit.setShortcut(_translate("MainWindow", "Ctrl+Q"))
        self.pushButton.setText(_translate("MainWindow", "Open a folder\n"
                                           "by clicking here"))

    def drawImage(self, button):

        if button == "l":
            if self.indx == -1:
                self.indx = len(self.entries)-1
            self.indx -= 1
        elif button == "r":
            if self.indx == len(self.entries)-1:
                self.indx = -1
            self.indx += 1
        print(self.indx)
        if self.entries != "":
            self.viewport.setPixmap(QtGui.QPixmap(
                f"{self.address}/{self.entries[self.indx]}"))

    def openFileDialog(self):
        file_dialog = QFileDialog()
        directory = file_dialog.getExistingDirectory(
            MainWindow, "Select folder")
        self.address = directory
        if self.address != "":
            self.entries = os.listdir(self.address)
            for n in range(len(self.entries)-1, -1, -1):
                i = self.entries[n]
                if (os.path.splitext(i)[1]) not in [".jpg", ".jpeg", ".png", ".heic"]:
                    self.entries.pop(n)

        if len(self.entries) == 0:
            self.entries = ""
            self.showPopup()
        else:
            self.deleteButton()
        self.indx = 0
        self.drawImage(None)

    def showPopup(self):
        msg = QMessageBox()
        msg.setWindowTitle("file not found")
        msg.setText("No images found")
        msg.setIcon(QMessageBox.Information)
        msg.setInformativeText("try opening another folder")
        x = msg.exec_()

    def deleteButton(self):
        self.pushButton.setParent(None)


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
